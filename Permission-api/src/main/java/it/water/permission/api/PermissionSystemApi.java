package it.water.permission.api;

import it.water.core.api.action.ResourceAction;
import it.water.core.api.model.Resource;
import it.water.core.api.service.BaseEntitySystemApi;
import it.water.permission.model.WaterPermission;

import java.util.Collection;
import java.util.List;

/**
 * @Generated by Water Generator
 * This interface defines the internally exposed methods for the entity and allows interaction with it bypassing permission system.
 * The main goals of PermissionSystemApi is to validate the entity and pass it to the persistence layer.
 */
public interface PermissionSystemApi extends BaseEntitySystemApi<WaterPermission> {
    /**
     * Find a permission by a specific user and resource
     *
     * @param userId   user parameter
     * @param resource parameter required to find a resource
     * @return Permission if found
     */
    WaterPermission findByUserAndResource(long userId, Resource resource);

    /**
     * Find a permission by a specific user and resource name
     *
     * @param userId       user parameter
     * @param resourceName parameter required to find a resource name
     * @return Permission if found
     */
    WaterPermission findByUserAndResourceName(long userId, String resourceName);

    /**
     * Find a permission by a specific user, resource name and resource id
     *
     * @param userId       user parameter
     * @param resourceName parameter required to find a resource name
     * @param id           parameter required to find a resource id
     * @return Permission if found
     */
    WaterPermission findByUserAndResourceNameAndResourceId(long userId, String resourceName, long id);

    /**
     * Find a permission by a specific role and resource
     *
     * @param roleId   parameter required to find role by roleId
     * @param resource parameter required to find a resource
     * @return Permission if found
     */
    WaterPermission findByRoleAndResource(long roleId, Resource resource);

    /**
     * Find a permission by a specific role and resource name
     *
     * @param roleId       parameter required to find role by roleId
     * @param resourceName parameter required to find a resource name
     * @return Permission if found
     */
    WaterPermission findByRoleAndResourceName(long roleId, String resourceName);

    /**
     * Find a permission by a specific role and resource name
     *
     * @param roleId parameter required to find role by roleId
     * @return Permission if found
     */
    Collection<WaterPermission> findByRole(long roleId);

    /**
     * Find a permission by a specific role, resource name and resource id
     *
     * @param roleId       parameter required to find role by roleId
     * @param resourceName parameter required to find a resource name
     * @param resourceId   parameter required to find a resource id
     * @return Permission if found
     */
    WaterPermission findByRoleAndResourceNameAndResourceId(long roleId, String resourceName, long resourceId);

    /**
     * @param roleId
     * @param actions List actions to add as permissions
     */
    void checkOrCreatePermissions(long roleId, List<ResourceAction<?>> actions);

    /**
     * @param roleId
     * @param entityId
     * @param actions
     */
    void checkOrCreatePermissionsSpecificToEntity(long roleId, long entityId, List<ResourceAction<?>> actions);

    /**
     * Verify if exist a permission specific to entity
     *
     * @param resourceName parameter required to find a resource name
     * @param resourceId   parameter required to find a resource id
     * @return true if exist a specific permission to this entity, false otherwise
     */
    boolean permissionSpecificToEntityExists(String resourceName, long resourceId);
}