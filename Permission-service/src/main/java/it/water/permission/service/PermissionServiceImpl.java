package it.water.permission.service;

import it.water.core.api.permission.PermissionManager;
import it.water.core.api.permission.SecurityContext;
import it.water.core.api.registry.ComponentRegistry;
import it.water.core.interceptors.annotations.FrameworkComponent;
import it.water.core.interceptors.annotations.Inject;
import it.water.core.permission.annotations.AllowLoggedUser;
import it.water.core.permission.exceptions.UnauthorizedException;
import it.water.permission.api.PermissionApi;
import it.water.permission.api.PermissionSystemApi;
import it.water.permission.model.WaterPermission;
import it.water.repository.service.BaseEntityServiceImpl;
import lombok.Getter;
import lombok.Setter;

import java.util.List;
import java.util.Map;


/**
 * @Generated by Water Generator
 * Service Api Class for Permission entity.
 */
@FrameworkComponent
public class PermissionServiceImpl extends BaseEntityServiceImpl<WaterPermission> implements PermissionApi {

    @Inject
    @Getter
    @Setter
    private PermissionSystemApi systemService;

    @Inject
    @Getter
    @Setter
    private PermissionManager permissionManager;

    @Inject
    @Getter
    @Setter
    private SecurityContext securityContext;

    @Inject
    @Getter
    @Setter
    private ComponentRegistry componentRegistry;

    public PermissionServiceImpl() {
        super(WaterPermission.class);
    }

    @Override
    @AllowLoggedUser
    public Map<String, Map<String, Map<String, Boolean>>> entityPermissionMap(Map<String, List<Long>> entityPks) {
        if (securityContext == null)
            throw new UnauthorizedException();
        return permissionManager.entityPermissionMap(securityContext.getLoggedUsername(), entityPks);
    }
}
