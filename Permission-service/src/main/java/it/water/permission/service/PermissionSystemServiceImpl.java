package it.water.permission.service;

import it.water.core.api.action.ResourceAction;
import it.water.core.api.model.Resource;
import it.water.core.api.registry.filter.ComponentFilterBuilder;
import it.water.core.interceptors.annotations.FrameworkComponent;
import it.water.core.interceptors.annotations.Inject;
import it.water.permission.api.PermissionRepository;
import it.water.permission.api.PermissionSystemApi;
import it.water.permission.model.WaterPermission;
import it.water.repository.entity.model.exceptions.NoResultException;
import it.water.repository.service.BaseEntitySystemServiceImpl;
import lombok.Getter;
import lombok.Setter;

import java.util.Collection;
import java.util.List;


/**
 * @Generated by Water Generator
 * System Service Api Class for Permission entity.
 */
@FrameworkComponent
public class PermissionSystemServiceImpl extends BaseEntitySystemServiceImpl<WaterPermission> implements PermissionSystemApi {
    @Inject
    @Getter
    @Setter
    private PermissionRepository repository;

    @Inject
    @Setter
    private ComponentFilterBuilder componentFilterBuilder;

    public PermissionSystemServiceImpl() {
        super(WaterPermission.class);
    }

    /**
     * Find a permission by a specific user and resource
     *
     * @param userId   user parameter
     * @param resource parameter required to find a resource
     * @return Permission if found
     */
    public WaterPermission findByUserAndResource(long userId, Resource resource) {
        getLog().debug("invoking findByUserAndResource user: {} Resource: {}"
                , userId, resource.getResourceName());
        try {
            return repository.findByUserAndResource(userId, resource);
        } catch (NoResultException e) {
            getLog().debug("No result searching for permission for user: {} Resource: {}"
                    , userId, resource.getResourceName());
            return null;
        }
    }

    /**
     * Find a permission by a specific user and resource name
     *
     * @param userId       parameter required to find role by roleId
     * @param resourceName parameter required to find a resource name
     * @return Permission if found
     */
    public WaterPermission findByUserAndResourceName(long userId, String resourceName) {
        getLog().debug("invoking findByUserAndResourceName user: {} Resource: {}"
                , userId, resourceName);
        try {
            return repository.findByUserAndResourceName(userId, resourceName);
        } catch (NoResultException e) {
            getLog().debug("No result searching for permission for user {} Resource: {}", userId, resourceName);
            return null;
        }
    }

    /**
     * Find a permission by a specific user, resource name and resource id
     *
     * @param userId       user parameter
     * @param resourceName parameter required to find a resource name
     * @param id           parameter required to find a resource id
     * @return Permission if found
     */
    public WaterPermission findByUserAndResourceNameAndResourceId(long userId, String resourceName,
                                                                  long id) {
        getLog().debug("invoking findByRoleAndResourceNameAndResourceId user: {} Resource: {}"
                , userId, resourceName);
        try {
            return repository.findByUserAndResourceNameAndResourceId(userId, resourceName, id);
        } catch (NoResultException e) {
            getLog().debug("No result searching for permission for user {} Resource: {} with id: {}", userId, resourceName, id);
            return null;
        }
    }

    /**
     * Find a permission by a specific role and resource
     *
     * @param roleId   parameter required to find role by roleId
     * @param resource parameter required to find a resource
     * @return Permission if found
     */
    public WaterPermission findByRoleAndResource(long roleId, Resource resource) {
        getLog().debug("invoking findByRoleAndResource role: {} Resource: {}"
                , roleId, resource.getResourceName());
        try {
            return repository.findByRoleAndResource(roleId, resource);
        } catch (NoResultException e) {
            getLog().debug("No result searching for permission for role: {} Resource: {}"
                    , roleId, resource.getResourceName());
            return null;
        }
    }

    /**
     * Find a permission by a specific role and resource name
     *
     * @param roleId       parameter required to find role by roleId
     * @param resourceName parameter required to find a resource name
     * @return Permission if found
     */
    public WaterPermission findByRoleAndResourceName(long roleId, String resourceName) {
        getLog().debug("invoking findByRoleAndResourceName role: {} Resource: {}"
                , roleId, resourceName);
        try {
            return repository.findByRoleAndResourceName(roleId, resourceName);
        } catch (NoResultException e) {
            getLog().debug("No result searching for permission for role {} Resource: {}", roleId, resourceName);
            return null;
        }
    }

    /**
     * Find a permission by a specific role, resource name and resource id
     *
     * @param roleId       parameter required to find role by roleId
     * @param resourceName parameter required to find a resource name
     * @param id           parameter required to find a resource id
     * @return Permission if found
     */
    public WaterPermission findByRoleAndResourceNameAndResourceId(long roleId, String resourceName,
                                                                  long id) {
        getLog().debug("invoking findByRoleAndResourceNameAndResourceId role: {} Resource: {}"
                , roleId, resourceName);
        try {
            return repository.findByRoleAndResourceNameAndResourceId(roleId, resourceName, id);
        } catch (NoResultException e) {
            getLog().debug("No result searching for permission for role {} Resource: {}} with id: {}", roleId, resourceName, id);
            return null;
        }
    }

    /**
     * Find a permission by a specific role, resource name and resource id
     *
     * @param roleId parameter required to find role by roleId
     * @return Permission if found
     */
    @Override
    public Collection<WaterPermission> findByRole(long roleId) {
        getLog().debug("invoking findByRoleAndResourceName role: {}", roleId);
        try {
            return repository.findByRole(roleId);
        } catch (NoResultException e) {
            getLog().debug("No result searching for permission for role {}", roleId);
            return null;
        }
    }

    /**
     * @param roleId
     * @param actions List actions to add as permissions
     */
    @Override
    public void checkOrCreatePermissions(long roleId, List<ResourceAction<?>> actions) {
        this.repository.checkOrCreatePermissions(roleId, actions);
    }

    /**
     * @param roleId
     * @param entityId
     * @param actions
     */
    @Override
    public void checkOrCreatePermissionsSpecificToEntity(long roleId, long entityId, List<ResourceAction<?>> actions) {
        this.repository.checkOrCreatePermissionsSpecificToEntity(roleId, entityId, actions);
    }

    /**
     * @param resourceName
     * @param resourceId
     * @return
     */
    @Override
    public boolean permissionSpecificToEntityExists(String resourceName, long resourceId) {
        return this.repository.permissionSpecificToEntityExists(resourceName, resourceId);
    }

}